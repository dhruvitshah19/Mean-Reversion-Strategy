# -*- coding: utf-8 -*-
"""Microsoft Mean Reversion Strategy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qn7bV4BkOqhnMeFrn4kjM0L1UY6zoqDI
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

from google.colab import files
files.upload()

#Read the data
df= pd.read_csv('MSFT.csv')
#Set the Data as index
df = df.set_index(pd.DatetimeIndex(df['Date'].values))
#Remove or drop the Date column
df.drop(['Date'], inplace = True, axis = 1)
#Show the data
df

#Create a function to calculate the simple moving average
def SMA(data, period = 30, column = 'Close'):
  return data[column].rolling(window=period).mean()

#Build and show the data set
df['SMA'] = SMA(df, 21)
df['Simple_Returns'] = df.pct_change(1)['Close']
df['Log_Returns'] = np.log(1+df['Simple_Returns'])
df['Ratios'] = df['Close'] / df['SMA']
#Show the data
df

#Get some statistics on the ratio column
df['Ratios'].describe()

#Get and show the percentile values
percentiles = [15, 20, 50, 80, 85]
#Remove any NA values in the ratios column and store the result in a new variable and call that new column ratios
ratios = df['Ratios'].dropna()
#Get the values of the percentiles
percentile_values = np.percentile(ratios, percentiles)
#Show the values of the perentiles
percentile_values

#Plot the ratios
plt.figure(figsize=(14,7))
plt.title('Ratios')
df['Ratios'].dropna().plot(legend = True)
plt.axhline(percentile_values[0], c='green', label = '15th percentile')
plt.axhline(percentile_values[2], c='yellow', label = '50th percentile')
plt.axhline(percentile_values[-1], c='black', label = '85th percentile')

#Create buy ad sell signals for the stragety
sell = percentile_values[-1] #The 85th percentile where we want to sell
buy = percentile_values[0] #The 15th perentile where we want to buy
#Put -1 where the ratio is greateer than the percentile to sell and nan otherwise
df['Positions'] = np.where(df.Ratios > sell, -1, np.nan)
#Put 1 where the ratio is less than the percentile to buy and put the current value othersiese
df['Positions'] = np.where(df.Ratios < buy, 1, df['Positions'])
#Use ffill to fill the missing values in the data frame. ffill stands for forward fill
df['Positions'] = df['Positions'].ffill()

#Get the buy and sell signals
df['Buy'] = np.where(df.Positions == 1, df['Close'], np.nan)
df['Sell'] = np.where(df.Positions == -1, df['Close'], np.nan)

#Visualize the buy and sell signals along with the close price
plt.figure(figsize=(14,7))
plt.title('Close Price w/ Buy & Sell signals')
plt.plot(df['Close'], alpha = 0.5, label= 'Close')
plt.plot(df['SMA'], alpha = 0.5, label= 'SMA')
plt.scatter(df.index, df['Buy'], color = 'green', label = 'Buy Signal', marker='^', alpha = 1)
plt.scatter(df.index, df['Sell'], color = 'black', label = 'Sell Signal', marker='v', alpha = 1)
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.show()

#Calculate the returns for the Mean Reversion Strategy
df['Strategy_Returns'] = df.Positions.shift(1) * df.Log_Returns
df['Strategy_Returns']

#Plot the cumulative log returns & the cumulative Mean Reversion Strategy
plt.figure(figsize=(14,7))
plt.title('Growth of $1 Investment')
plt.plot(np.exp(df['Log_Returns'].dropna()).cumprod(), c = 'green',label = 'Buy/Hold Strategy' )
plt.plot(np.exp(df['Strategy_Returns'].dropna()).cumprod(), c = 'blue',label = 'Mean Reversion Strategy' )
plt.legend()

#Print the returns for both strategies
print('Buy & Hold Strategy Returns:', np.exp(df['Log_Returns'].dropna()).cumprod()[-1] - 1)
print('Mean Reversion Strategy Returns:', np.exp(df['Strategy_Returns'].dropna()).cumprod()[-1] - 1)